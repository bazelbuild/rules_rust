module(
    name = "rules_rust",
    version = "0.20.0",
)

print("WARNING: The rules_rust Bazel module is still highly experimental and subject to change at any time. Only use it to try out bzlmod for now.")  # buildifier: disable=print

bazel_dep(
    name = "platforms",
    version = "0.0.7",
)

bazel_dep(
    name = "rules_cc",
    version = "0.0.9",
)

bazel_dep(
    name = "bazel_skylib",
    version = "1.2.0",
)

bazel_dep(
    name = "apple_support",
    version = "1.3.1",
    repo_name = "build_bazel_apple_support",
)

internal_deps = use_extension("//rust/private:extensions.bzl", "internal_deps")

use_repo(
    internal_deps,
    "cui",
    "cui__anyhow-1.0.75",
    "cui__cargo-lock-9.0.0",
    "cui__cargo-platform-0.1.4",
    "cui__cargo_metadata-0.18.1",
    "cui__cargo_toml-0.17.0",
    "cui__cfg-expr-0.15.5",
    "cui__clap-4.3.11",
    "cui__crates-index-2.2.0",
    "cui__hex-0.4.3",
    "cui__indoc-2.0.4",
    "cui__itertools-0.11.0",
    "cui__normpath-1.1.1",
    "cui__pathdiff-0.2.1",
    "cui__regex-1.10.2",
    "cui__semver-1.0.20",
    "cui__serde-1.0.190",
    "cui__serde_json-1.0.108",
    "cui__serde_starlark-0.1.14",
    "cui__sha2-0.10.8",
    "cui__tempfile-3.8.1",
    "cui__tera-1.19.1",
    "cui__textwrap-0.16.0",
    "cui__toml-0.8.6",
    "cui__tracing-0.1.40",
    "cui__tracing-subscriber-0.3.17",
    "rules_rust_tinyjson",
)

rust = use_extension("//rust:extensions.bzl", "rust")

# Allow us to run, for example, "bazel build //tools/runfiles" with bzlmod.
# Register it as a dev dependency so that we don't force this toolchain on
# downstream users.
rust.toolchain(edition = "2021")

use_repo(rust, "rust_toolchains")

register_toolchains(
    "@rust_toolchains//:all",
    dev_dependency = True,
)

use_repo(rust, "rust_host_tools")

cargo_bazel_bootstrap = use_extension("//crate_universe/private/module_extensions:cargo_bazel_bootstrap.bzl", "cargo_bazel_bootstrap")

use_repo(cargo_bazel_bootstrap, "cargo_bazel_bootstrap")
