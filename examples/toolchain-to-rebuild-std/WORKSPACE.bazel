workspace(name = "rebuild_std_example")

# Users of `rules_rust` will commonly be unable to load it
# using a `local_repository`. Instead, to setup the rules,
# please see https://bazelbuild.github.io/rules_rust/#setup
local_repository(
    name = "rules_rust",
    path = "../..",
)

load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")

rules_rust_dependencies()

register_toolchains(
    "//dummy_cc_toolchain:dummy_cc_aarch64_toolchain",
    "//dummy_cc_toolchain:dummy_cc_wasm32_toolchain",
)

# # The dates need to be sequential so that the stdlibs are built
# # using the previous beta rustc
[
    previous_beta_date,
    current_beta_date,
] = [
    "2023-08-22",
    "2023-09-18",
]

rust_register_toolchains(
    edition = "2021",
    extra_rustc_flags = {
        "aarch64-apple-darwin": ["--cap-lints=allow"],
    },
    extra_target_triples = [
        "wasm32-wasi",
        "aarch64-apple-darwin",
    ],
    versions = [
        # beta toolchain to rebuild stdlibs
        "beta/" + previous_beta_date,
        # stable toolchain to build process_wrapper and tinyjson
        "1.73.0",
    ],
)

# http_archive(
#     name = "wasi",
#     build_file = "@rules_rust//util/import/3rdparty/crates:BUILD.wasi-0.11.0+wasi-snapshot-preview1.bazel",
#     strip_prefix = "wasi-0.11.0",
#     # sha256 = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
#     url = "https://github.com/bytecodealliance/wasi/archive/refs/tags/0.11.0.zip",
# )

load(":stdlibs.bzl", "stdlibs")

# # Run
# # bazel build @stage2_stdlibs//:std --@rules_rust//rust/toolchain/channel:channel=beta --platforms=//:aarch64-apple-darwin
# # To rebuild standard library for aarch64-apple-darwin
stdlibs(
    name = "stdlibs",
    beta_date = current_beta_date,
    build_file = "//:stdlibs.BUILD.bazel",
)

register_toolchains(
    "//toolchain:toolchain_aarch64-apple-darwin",
    "//toolchain:toolchain_wasm32-wasi",
)
