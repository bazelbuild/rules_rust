load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_library", "rust_test")

genrule(
    name = "generate_src",
    outs = ["src.rs"],
    cmd = """cat <<EOF > $(location src.rs)
#[cfg(not(generated_file_as_root))]
pub fn forty_two() -> i32 { 42 }

#[cfg(generated_file_as_root)]
mod lib_for_src;

#[cfg(generated_file_as_root)]
pub fn get_forty_two_as_string() -> String {
    format!("{}", lib_for_src::forty_two())
}
EOF"""
)

rust_library(
    name = "use_generated_src",
    srcs = ["lib.rs", ":src.rs"],
    edition = "2018",
)

rust_library(
    name = "use_generated_src_with_crate_root_defined",
    srcs = ["lib.rs", ":src.rs"],
    crate_root = "lib.rs",
    edition = "2018",
)

rust_library(
    name = "use_generated_src_as_crate_root",
    srcs = ["lib.rs", "lib_for_src.rs", ":src.rs"],
    edition = "2018",
    crate_root = ":src.rs",
    rustc_flags = ["--cfg=generated_file_as_root"],
)

# When no lib.rs, main.rs file exists, we try to use the file that carries
# the target's name as a crate_root.
rust_library(
    name = "src",
    srcs = ["lib_for_src.rs", ":src.rs"],
    rustc_flags = ["--cfg=generated_file_as_root"],
    edition = "2018",
)

rust_test(
    name = "generated_src_test",
    crate = ":use_generated_src_with_crate_root_defined",
    edition = "2018",
)

rust_binary(
    name = "print_42",
    srcs = [":src.rs", "main.rs"],
    edition = "2018",
)
