###############################################################################
# @generated
# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To
# regenerate this file, run the following:
#
#     bazel run @@//test/determinism/3rdparty:crates_vendor
###############################################################################
"""
# `crates_repository` API

- [aliases](#aliases)
- [crate_deps](#crate_deps)
- [all_crate_deps](#all_crate_deps)
- [crate_repositories](#crate_repositories)

"""

load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")

###############################################################################
# MACROS API
###############################################################################

# An identifier that represent common dependencies (unconditional).
_COMMON_CONDITION = ""

def _flatten_dependency_maps(all_dependency_maps):
    """Flatten a list of dependency maps into one dictionary.

    Dependency maps have the following structure:

    ```python
    DEPENDENCIES_MAP = {
        # The first key in the map is a Bazel package
        # name of the workspace this file is defined in.
        "workspace_member_package": {

            # Not all dependencies are supported for all platforms.
            # the condition key is the condition required to be true
            # on the host platform.
            "condition": {

                # An alias to a crate target.     # The label of the crate target the
                # Aliases are only crate names.   # package name refers to.
                "package_name":                   "@full//:label",
            }
        }
    }
    ```

    Args:
        all_dependency_maps (list): A list of dicts as described above

    Returns:
        dict: A dictionary as described above
    """
    dependencies = {}

    for workspace_deps_map in all_dependency_maps:
        for pkg_name, conditional_deps_map in workspace_deps_map.items():
            if pkg_name not in dependencies:
                non_frozen_map = dict()
                for key, values in conditional_deps_map.items():
                    non_frozen_map.update({key: dict(values.items())})
                dependencies.setdefault(pkg_name, non_frozen_map)
                continue

            for condition, deps_map in conditional_deps_map.items():
                # If the condition has not been recorded, do so and continue
                if condition not in dependencies[pkg_name]:
                    dependencies[pkg_name].setdefault(condition, dict(deps_map.items()))
                    continue

                # Alert on any miss-matched dependencies
                inconsistent_entries = []
                for crate_name, crate_label in deps_map.items():
                    existing = dependencies[pkg_name][condition].get(crate_name)
                    if existing and existing != crate_label:
                        inconsistent_entries.append((crate_name, existing, crate_label))
                    dependencies[pkg_name][condition].update({crate_name: crate_label})

    return dependencies

def crate_deps(deps, package_name = None):
    """Finds the fully qualified label of the requested crates for the package where this macro is called.

    Args:
        deps (list): The desired list of crate targets.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()`.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if not deps:
        return []

    if package_name == None:
        package_name = native.package_name()

    # Join both sets of dependencies
    dependencies = _flatten_dependency_maps([
        _NORMAL_DEPENDENCIES,
        _NORMAL_DEV_DEPENDENCIES,
        _PROC_MACRO_DEPENDENCIES,
        _PROC_MACRO_DEV_DEPENDENCIES,
        _BUILD_DEPENDENCIES,
        _BUILD_PROC_MACRO_DEPENDENCIES,
    ]).pop(package_name, {})

    # Combine all conditional packages so we can easily index over a flat list
    # TODO: Perhaps this should actually return select statements and maintain
    # the conditionals of the dependencies
    flat_deps = {}
    for deps_set in dependencies.values():
        for crate_name, crate_label in deps_set.items():
            flat_deps.update({crate_name: crate_label})

    missing_crates = []
    crate_targets = []
    for crate_target in deps:
        if crate_target not in flat_deps:
            missing_crates.append(crate_target)
        else:
            crate_targets.append(flat_deps[crate_target])

    if missing_crates:
        fail("Could not find crates `{}` among dependencies of `{}`. Available dependencies were `{}`".format(
            missing_crates,
            package_name,
            dependencies,
        ))

    return crate_targets

def all_crate_deps(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Finds the fully qualified label of all requested direct crate dependencies \
    for the package where this macro is called.

    If no parameters are set, all normal dependencies are returned. Setting any one flag will
    otherwise impact the contents of the returned list.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normal dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_dependency_maps = []
    if normal:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)
    if normal_dev:
        all_dependency_maps.append(_NORMAL_DEV_DEPENDENCIES)
    if proc_macro:
        all_dependency_maps.append(_PROC_MACRO_DEPENDENCIES)
    if proc_macro_dev:
        all_dependency_maps.append(_PROC_MACRO_DEV_DEPENDENCIES)
    if build:
        all_dependency_maps.append(_BUILD_DEPENDENCIES)
    if build_proc_macro:
        all_dependency_maps.append(_BUILD_PROC_MACRO_DEPENDENCIES)

    # Default to always using normal dependencies
    if not all_dependency_maps:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)

    dependencies = _flatten_dependency_maps(all_dependency_maps).pop(package_name, None)

    if not dependencies:
        if dependencies == None:
            fail("Tried to get all_crate_deps for package " + package_name + " but that package had no Cargo.toml file")
        else:
            return []

    crate_deps = list(dependencies.pop(_COMMON_CONDITION, {}).values())
    for condition, deps in dependencies.items():
        crate_deps += selects.with_or({
            tuple(_CONDITIONS[condition]): deps.values(),
            "//conditions:default": [],
        })

    return crate_deps

def aliases(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Produces a map of Crate alias names to their original label

    If no dependency kinds are specified, `normal` and `proc_macro` are used by default.
    Setting any one flag will otherwise determine the contents of the returned dict.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normal dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        dict: The aliases of all associated packages
    """
    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_aliases_maps = []
    if normal:
        all_aliases_maps.append(_NORMAL_ALIASES)
    if normal_dev:
        all_aliases_maps.append(_NORMAL_DEV_ALIASES)
    if proc_macro:
        all_aliases_maps.append(_PROC_MACRO_ALIASES)
    if proc_macro_dev:
        all_aliases_maps.append(_PROC_MACRO_DEV_ALIASES)
    if build:
        all_aliases_maps.append(_BUILD_ALIASES)
    if build_proc_macro:
        all_aliases_maps.append(_BUILD_PROC_MACRO_ALIASES)

    # Default to always using normal aliases
    if not all_aliases_maps:
        all_aliases_maps.append(_NORMAL_ALIASES)
        all_aliases_maps.append(_PROC_MACRO_ALIASES)

    aliases = _flatten_dependency_maps(all_aliases_maps).pop(package_name, None)

    if not aliases:
        return dict()

    common_items = aliases.pop(_COMMON_CONDITION, {}).items()

    # If there are only common items in the dictionary, immediately return them
    if not len(aliases.keys()) == 1:
        return dict(common_items)

    # Build a single select statement where each conditional has accounted for the
    # common set of aliases.
    crate_aliases = {"//conditions:default": dict(common_items)}
    for condition, deps in aliases.items():
        condition_triples = _CONDITIONS[condition]
        for triple in condition_triples:
            if triple in crate_aliases:
                crate_aliases[triple].update(deps)
            else:
                crate_aliases.update({triple: dict(deps.items() + common_items)})

    return select(crate_aliases)

###############################################################################
# WORKSPACE MEMBER DEPS AND ALIASES
###############################################################################

_NORMAL_DEPENDENCIES = {
    "": {
        _COMMON_CONDITION: {
            "anyhow": Label("@rrtd//:anyhow-1.0.100"),
            "blake3": Label("@rrtd//:blake3-1.8.2"),
            "clap": Label("@rrtd//:clap-4.5.50"),
            "serde": Label("@rrtd//:serde-1.0.228"),
            "serde_json": Label("@rrtd//:serde_json-1.0.145"),
            "tempfile": Label("@rrtd//:tempfile-3.23.0"),
            "tokio": Label("@rrtd//:tokio-1.48.0"),
            "tracing": Label("@rrtd//:tracing-0.1.41"),
            "tracing-subscriber": Label("@rrtd//:tracing-subscriber-0.3.20"),
            "walkdir": Label("@rrtd//:walkdir-2.5.0"),
        },
    },
}

_NORMAL_ALIASES = {
    "": {
        _COMMON_CONDITION: {
        },
    },
}

_NORMAL_DEV_DEPENDENCIES = {
    "": {
    },
}

_NORMAL_DEV_ALIASES = {
    "": {
    },
}

_PROC_MACRO_DEPENDENCIES = {
    "": {
    },
}

_PROC_MACRO_ALIASES = {
    "": {
    },
}

_PROC_MACRO_DEV_DEPENDENCIES = {
    "": {
    },
}

_PROC_MACRO_DEV_ALIASES = {
    "": {
    },
}

_BUILD_DEPENDENCIES = {
    "": {
    },
}

_BUILD_ALIASES = {
    "": {
    },
}

_BUILD_PROC_MACRO_DEPENDENCIES = {
    "": {
    },
}

_BUILD_PROC_MACRO_ALIASES = {
    "": {
    },
}

_CONDITIONS = {
    "aarch64-apple-darwin": ["@rules_rust//rust/platform:aarch64-apple-darwin"],
    "aarch64-apple-ios": ["@rules_rust//rust/platform:aarch64-apple-ios"],
    "aarch64-apple-ios-sim": ["@rules_rust//rust/platform:aarch64-apple-ios-sim"],
    "aarch64-linux-android": ["@rules_rust//rust/platform:aarch64-linux-android"],
    "aarch64-pc-windows-gnullvm": [],
    "aarch64-pc-windows-msvc": ["@rules_rust//rust/platform:aarch64-pc-windows-msvc"],
    "aarch64-unknown-fuchsia": ["@rules_rust//rust/platform:aarch64-unknown-fuchsia"],
    "aarch64-unknown-linux-gnu": ["@rules_rust//rust/platform:aarch64-unknown-linux-gnu", "@rules_rust//rust/platform:aarch64-unknown-nixos-gnu"],
    "aarch64-unknown-nixos-gnu": ["@rules_rust//rust/platform:aarch64-unknown-nixos-gnu"],
    "aarch64-unknown-nto-qnx710": ["@rules_rust//rust/platform:aarch64-unknown-nto-qnx710"],
    "aarch64-unknown-uefi": ["@rules_rust//rust/platform:aarch64-unknown-uefi"],
    "arm-unknown-linux-gnueabi": ["@rules_rust//rust/platform:arm-unknown-linux-gnueabi"],
    "armv7-linux-androideabi": ["@rules_rust//rust/platform:armv7-linux-androideabi"],
    "armv7-unknown-linux-gnueabi": ["@rules_rust//rust/platform:armv7-unknown-linux-gnueabi"],
    "cfg(all(any(target_arch = \"x86_64\", target_arch = \"arm64ec\"), target_env = \"msvc\", not(windows_raw_dylib)))": ["@rules_rust//rust/platform:x86_64-pc-windows-msvc"],
    "cfg(all(any(target_os = \"linux\"), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", any(target_arch = \"s390x\", target_arch = \"powerpc\")), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc\"), all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))": ["@rules_rust//rust/platform:powerpc-unknown-linux-gnu", "@rules_rust//rust/platform:s390x-unknown-linux-gnu"],
    "cfg(all(any(target_os = \"linux\", target_os = \"android\"), not(any(all(target_os = \"linux\", target_env = \"\"), getrandom_backend = \"custom\", getrandom_backend = \"linux_raw\", getrandom_backend = \"rdrand\", getrandom_backend = \"rndr\"))))": ["@rules_rust//rust/platform:aarch64-linux-android", "@rules_rust//rust/platform:aarch64-unknown-linux-gnu", "@rules_rust//rust/platform:aarch64-unknown-nixos-gnu", "@rules_rust//rust/platform:arm-unknown-linux-gnueabi", "@rules_rust//rust/platform:armv7-linux-androideabi", "@rules_rust//rust/platform:armv7-unknown-linux-gnueabi", "@rules_rust//rust/platform:i686-linux-android", "@rules_rust//rust/platform:i686-unknown-linux-gnu", "@rules_rust//rust/platform:powerpc-unknown-linux-gnu", "@rules_rust//rust/platform:riscv64gc-unknown-linux-gnu", "@rules_rust//rust/platform:s390x-unknown-linux-gnu", "@rules_rust//rust/platform:x86_64-linux-android", "@rules_rust//rust/platform:x86_64-unknown-linux-gnu", "@rules_rust//rust/platform:x86_64-unknown-nixos-gnu"],
    "cfg(all(not(rustix_use_libc), not(miri), target_os = \"linux\", any(target_endian = \"little\", any(target_arch = \"s390x\", target_arch = \"powerpc\")), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc\"), all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\"))))": ["@rules_rust//rust/platform:aarch64-unknown-linux-gnu", "@rules_rust//rust/platform:aarch64-unknown-nixos-gnu", "@rules_rust//rust/platform:arm-unknown-linux-gnueabi", "@rules_rust//rust/platform:armv7-unknown-linux-gnueabi", "@rules_rust//rust/platform:i686-unknown-linux-gnu", "@rules_rust//rust/platform:riscv64gc-unknown-linux-gnu", "@rules_rust//rust/platform:x86_64-unknown-linux-gnu", "@rules_rust//rust/platform:x86_64-unknown-nixos-gnu"],
    "cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", any(target_arch = \"s390x\", target_arch = \"powerpc\")), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc\"), all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))": ["@rules_rust//rust/platform:aarch64-apple-darwin", "@rules_rust//rust/platform:aarch64-apple-ios", "@rules_rust//rust/platform:aarch64-apple-ios-sim", "@rules_rust//rust/platform:aarch64-linux-android", "@rules_rust//rust/platform:aarch64-unknown-fuchsia", "@rules_rust//rust/platform:aarch64-unknown-nto-qnx710", "@rules_rust//rust/platform:aarch64-unknown-uefi", "@rules_rust//rust/platform:armv7-linux-androideabi", "@rules_rust//rust/platform:i686-apple-darwin", "@rules_rust//rust/platform:i686-linux-android", "@rules_rust//rust/platform:i686-unknown-freebsd", "@rules_rust//rust/platform:powerpc-unknown-linux-gnu", "@rules_rust//rust/platform:riscv32imc-unknown-none-elf", "@rules_rust//rust/platform:riscv64gc-unknown-none-elf", "@rules_rust//rust/platform:s390x-unknown-linux-gnu", "@rules_rust//rust/platform:thumbv7em-none-eabi", "@rules_rust//rust/platform:thumbv8m.main-none-eabi", "@rules_rust//rust/platform:wasm32-unknown-emscripten", "@rules_rust//rust/platform:wasm32-unknown-unknown", "@rules_rust//rust/platform:wasm32-wasip1", "@rules_rust//rust/platform:wasm32-wasip1-threads", "@rules_rust//rust/platform:wasm32-wasip2", "@rules_rust//rust/platform:x86_64-apple-darwin", "@rules_rust//rust/platform:x86_64-apple-ios", "@rules_rust//rust/platform:x86_64-linux-android", "@rules_rust//rust/platform:x86_64-unknown-freebsd", "@rules_rust//rust/platform:x86_64-unknown-fuchsia", "@rules_rust//rust/platform:x86_64-unknown-none", "@rules_rust//rust/platform:x86_64-unknown-uefi"],
    "cfg(all(target_arch = \"aarch64\", target_env = \"msvc\", not(windows_raw_dylib)))": ["@rules_rust//rust/platform:aarch64-pc-windows-msvc"],
    "cfg(all(target_arch = \"wasm32\", target_os = \"wasi\", target_env = \"p2\"))": ["@rules_rust//rust/platform:wasm32-wasip2"],
    "cfg(all(target_arch = \"x86\", target_env = \"gnu\", not(target_abi = \"llvm\"), not(windows_raw_dylib)))": ["@rules_rust//rust/platform:i686-unknown-linux-gnu"],
    "cfg(all(target_arch = \"x86\", target_env = \"msvc\", not(windows_raw_dylib)))": ["@rules_rust//rust/platform:i686-pc-windows-msvc"],
    "cfg(all(target_arch = \"x86_64\", target_env = \"gnu\", not(target_abi = \"llvm\"), not(windows_raw_dylib)))": ["@rules_rust//rust/platform:x86_64-unknown-linux-gnu", "@rules_rust//rust/platform:x86_64-unknown-nixos-gnu"],
    "cfg(all(target_os = \"uefi\", getrandom_backend = \"efi_rng\"))": [],
    "cfg(any())": [],
    "cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"hurd\", target_os = \"illumos\", target_os = \"cygwin\", all(target_os = \"horizon\", target_arch = \"arm\")))": ["@rules_rust//rust/platform:i686-unknown-freebsd", "@rules_rust//rust/platform:x86_64-unknown-freebsd"],
    "cfg(any(target_os = \"haiku\", target_os = \"redox\", target_os = \"nto\", target_os = \"aix\"))": ["@rules_rust//rust/platform:aarch64-unknown-nto-qnx710"],
    "cfg(any(target_os = \"ios\", target_os = \"visionos\", target_os = \"watchos\", target_os = \"tvos\"))": ["@rules_rust//rust/platform:aarch64-apple-ios", "@rules_rust//rust/platform:aarch64-apple-ios-sim", "@rules_rust//rust/platform:x86_64-apple-ios"],
    "cfg(any(target_os = \"macos\", target_os = \"openbsd\", target_os = \"vita\", target_os = \"emscripten\"))": ["@rules_rust//rust/platform:aarch64-apple-darwin", "@rules_rust//rust/platform:i686-apple-darwin", "@rules_rust//rust/platform:wasm32-unknown-emscripten", "@rules_rust//rust/platform:x86_64-apple-darwin"],
    "cfg(any(unix, target_os = \"wasi\"))": ["@rules_rust//rust/platform:aarch64-apple-darwin", "@rules_rust//rust/platform:aarch64-apple-ios", "@rules_rust//rust/platform:aarch64-apple-ios-sim", "@rules_rust//rust/platform:aarch64-linux-android", "@rules_rust//rust/platform:aarch64-unknown-fuchsia", "@rules_rust//rust/platform:aarch64-unknown-linux-gnu", "@rules_rust//rust/platform:aarch64-unknown-nixos-gnu", "@rules_rust//rust/platform:aarch64-unknown-nto-qnx710", "@rules_rust//rust/platform:arm-unknown-linux-gnueabi", "@rules_rust//rust/platform:armv7-linux-androideabi", "@rules_rust//rust/platform:armv7-unknown-linux-gnueabi", "@rules_rust//rust/platform:i686-apple-darwin", "@rules_rust//rust/platform:i686-linux-android", "@rules_rust//rust/platform:i686-unknown-freebsd", "@rules_rust//rust/platform:i686-unknown-linux-gnu", "@rules_rust//rust/platform:powerpc-unknown-linux-gnu", "@rules_rust//rust/platform:riscv64gc-unknown-linux-gnu", "@rules_rust//rust/platform:s390x-unknown-linux-gnu", "@rules_rust//rust/platform:wasm32-unknown-emscripten", "@rules_rust//rust/platform:wasm32-wasip1", "@rules_rust//rust/platform:wasm32-wasip1-threads", "@rules_rust//rust/platform:wasm32-wasip2", "@rules_rust//rust/platform:x86_64-apple-darwin", "@rules_rust//rust/platform:x86_64-apple-ios", "@rules_rust//rust/platform:x86_64-linux-android", "@rules_rust//rust/platform:x86_64-unknown-freebsd", "@rules_rust//rust/platform:x86_64-unknown-fuchsia", "@rules_rust//rust/platform:x86_64-unknown-linux-gnu", "@rules_rust//rust/platform:x86_64-unknown-nixos-gnu"],
    "cfg(target_os = \"hermit\")": [],
    "cfg(target_os = \"netbsd\")": [],
    "cfg(target_os = \"redox\")": [],
    "cfg(target_os = \"solaris\")": [],
    "cfg(target_os = \"vxworks\")": [],
    "cfg(target_os = \"wasi\")": ["@rules_rust//rust/platform:wasm32-wasip1", "@rules_rust//rust/platform:wasm32-wasip1-threads", "@rules_rust//rust/platform:wasm32-wasip2"],
    "cfg(unix)": ["@rules_rust//rust/platform:aarch64-apple-darwin", "@rules_rust//rust/platform:aarch64-apple-ios", "@rules_rust//rust/platform:aarch64-apple-ios-sim", "@rules_rust//rust/platform:aarch64-linux-android", "@rules_rust//rust/platform:aarch64-unknown-fuchsia", "@rules_rust//rust/platform:aarch64-unknown-linux-gnu", "@rules_rust//rust/platform:aarch64-unknown-nixos-gnu", "@rules_rust//rust/platform:aarch64-unknown-nto-qnx710", "@rules_rust//rust/platform:arm-unknown-linux-gnueabi", "@rules_rust//rust/platform:armv7-linux-androideabi", "@rules_rust//rust/platform:armv7-unknown-linux-gnueabi", "@rules_rust//rust/platform:i686-apple-darwin", "@rules_rust//rust/platform:i686-linux-android", "@rules_rust//rust/platform:i686-unknown-freebsd", "@rules_rust//rust/platform:i686-unknown-linux-gnu", "@rules_rust//rust/platform:powerpc-unknown-linux-gnu", "@rules_rust//rust/platform:riscv64gc-unknown-linux-gnu", "@rules_rust//rust/platform:s390x-unknown-linux-gnu", "@rules_rust//rust/platform:wasm32-unknown-emscripten", "@rules_rust//rust/platform:x86_64-apple-darwin", "@rules_rust//rust/platform:x86_64-apple-ios", "@rules_rust//rust/platform:x86_64-linux-android", "@rules_rust//rust/platform:x86_64-unknown-freebsd", "@rules_rust//rust/platform:x86_64-unknown-fuchsia", "@rules_rust//rust/platform:x86_64-unknown-linux-gnu", "@rules_rust//rust/platform:x86_64-unknown-nixos-gnu"],
    "cfg(windows)": ["@rules_rust//rust/platform:aarch64-pc-windows-msvc", "@rules_rust//rust/platform:i686-pc-windows-msvc", "@rules_rust//rust/platform:x86_64-pc-windows-msvc"],
    "cfg(windows_raw_dylib)": [],
    "i686-apple-darwin": ["@rules_rust//rust/platform:i686-apple-darwin"],
    "i686-linux-android": ["@rules_rust//rust/platform:i686-linux-android"],
    "i686-pc-windows-gnullvm": [],
    "i686-pc-windows-msvc": ["@rules_rust//rust/platform:i686-pc-windows-msvc"],
    "i686-unknown-freebsd": ["@rules_rust//rust/platform:i686-unknown-freebsd"],
    "i686-unknown-linux-gnu": ["@rules_rust//rust/platform:i686-unknown-linux-gnu"],
    "powerpc-unknown-linux-gnu": ["@rules_rust//rust/platform:powerpc-unknown-linux-gnu"],
    "riscv32imc-unknown-none-elf": ["@rules_rust//rust/platform:riscv32imc-unknown-none-elf"],
    "riscv64gc-unknown-linux-gnu": ["@rules_rust//rust/platform:riscv64gc-unknown-linux-gnu"],
    "riscv64gc-unknown-none-elf": ["@rules_rust//rust/platform:riscv64gc-unknown-none-elf"],
    "s390x-unknown-linux-gnu": ["@rules_rust//rust/platform:s390x-unknown-linux-gnu"],
    "thumbv7em-none-eabi": ["@rules_rust//rust/platform:thumbv7em-none-eabi"],
    "thumbv8m.main-none-eabi": ["@rules_rust//rust/platform:thumbv8m.main-none-eabi"],
    "wasm32-unknown-emscripten": ["@rules_rust//rust/platform:wasm32-unknown-emscripten"],
    "wasm32-unknown-unknown": ["@rules_rust//rust/platform:wasm32-unknown-unknown"],
    "wasm32-wasip1": ["@rules_rust//rust/platform:wasm32-wasip1"],
    "wasm32-wasip1-threads": ["@rules_rust//rust/platform:wasm32-wasip1-threads"],
    "wasm32-wasip2": ["@rules_rust//rust/platform:wasm32-wasip2"],
    "x86_64-apple-darwin": ["@rules_rust//rust/platform:x86_64-apple-darwin"],
    "x86_64-apple-ios": ["@rules_rust//rust/platform:x86_64-apple-ios"],
    "x86_64-linux-android": ["@rules_rust//rust/platform:x86_64-linux-android"],
    "x86_64-pc-windows-gnullvm": [],
    "x86_64-pc-windows-msvc": ["@rules_rust//rust/platform:x86_64-pc-windows-msvc"],
    "x86_64-unknown-freebsd": ["@rules_rust//rust/platform:x86_64-unknown-freebsd"],
    "x86_64-unknown-fuchsia": ["@rules_rust//rust/platform:x86_64-unknown-fuchsia"],
    "x86_64-unknown-linux-gnu": ["@rules_rust//rust/platform:x86_64-unknown-linux-gnu", "@rules_rust//rust/platform:x86_64-unknown-nixos-gnu"],
    "x86_64-unknown-nixos-gnu": ["@rules_rust//rust/platform:x86_64-unknown-nixos-gnu"],
    "x86_64-unknown-none": ["@rules_rust//rust/platform:x86_64-unknown-none"],
    "x86_64-unknown-uefi": ["@rules_rust//rust/platform:x86_64-unknown-uefi"],
}

###############################################################################

def crate_repositories():
    """A macro for defining repositories for all generated crates.

    Returns:
      A list of repos visible to the module through the module extension.
    """
    maybe(
        http_archive,
        name = "rrtd__anstream-0.6.21",
        sha256 = "43d5b281e737544384e969a5ccad3f1cdd24b48086a0fc1b2a5262a26b8f4f4a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/anstream/0.6.21/download"],
        strip_prefix = "anstream-0.6.21",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.anstream-0.6.21.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__anstyle-1.0.13",
        sha256 = "5192cca8006f1fd4f7237516f40fa183bb07f8fbdfedaa0036de5ea9b0b45e78",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/anstyle/1.0.13/download"],
        strip_prefix = "anstyle-1.0.13",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.anstyle-1.0.13.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__anstyle-parse-0.2.7",
        sha256 = "4e7644824f0aa2c7b9384579234ef10eb7efb6a0deb83f9630a49594dd9c15c2",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/anstyle-parse/0.2.7/download"],
        strip_prefix = "anstyle-parse-0.2.7",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.anstyle-parse-0.2.7.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__anstyle-query-1.1.4",
        sha256 = "9e231f6134f61b71076a3eab506c379d4f36122f2af15a9ff04415ea4c3339e2",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/anstyle-query/1.1.4/download"],
        strip_prefix = "anstyle-query-1.1.4",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.anstyle-query-1.1.4.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__anstyle-wincon-3.0.10",
        sha256 = "3e0633414522a32ffaac8ac6cc8f748e090c5717661fddeea04219e2344f5f2a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/anstyle-wincon/3.0.10/download"],
        strip_prefix = "anstyle-wincon-3.0.10",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.anstyle-wincon-3.0.10.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__anyhow-1.0.100",
        sha256 = "a23eb6b1614318a8071c9b2521f36b424b2c83db5eb3a0fead4a6c0809af6e61",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/anyhow/1.0.100/download"],
        strip_prefix = "anyhow-1.0.100",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.anyhow-1.0.100.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__arrayref-0.3.9",
        sha256 = "76a2e8124351fda1ef8aaaa3bbd7ebbcb486bbcd4225aca0aa0d84bb2db8fecb",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/arrayref/0.3.9/download"],
        strip_prefix = "arrayref-0.3.9",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.arrayref-0.3.9.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__arrayvec-0.7.6",
        sha256 = "7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/arrayvec/0.7.6/download"],
        strip_prefix = "arrayvec-0.7.6",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.arrayvec-0.7.6.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__bitflags-2.10.0",
        sha256 = "812e12b5285cc515a9c72a5c1d3b6d46a19dac5acfef5265968c166106e31dd3",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/bitflags/2.10.0/download"],
        strip_prefix = "bitflags-2.10.0",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.bitflags-2.10.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__blake3-1.8.2",
        sha256 = "3888aaa89e4b2a40fca9848e400f6a658a5a3978de7be858e209cafa8be9a4a0",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/blake3/1.8.2/download"],
        strip_prefix = "blake3-1.8.2",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.blake3-1.8.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__bytes-1.10.1",
        sha256 = "d71b6127be86fdcfddb610f7182ac57211d4b18a3e9c82eb2d17662f2227ad6a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/bytes/1.10.1/download"],
        strip_prefix = "bytes-1.10.1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.bytes-1.10.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__cc-1.2.41",
        sha256 = "ac9fe6cdbb24b6ade63616c0a0688e45bb56732262c158df3c0c4bea4ca47cb7",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/cc/1.2.41/download"],
        strip_prefix = "cc-1.2.41",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.cc-1.2.41.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__cfg-if-1.0.4",
        sha256 = "9330f8b2ff13f34540b44e946ef35111825727b38d33286ef986142615121801",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/cfg-if/1.0.4/download"],
        strip_prefix = "cfg-if-1.0.4",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.cfg-if-1.0.4.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__clap-4.5.50",
        sha256 = "0c2cfd7bf8a6017ddaa4e32ffe7403d547790db06bd171c1c53926faab501623",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/clap/4.5.50/download"],
        strip_prefix = "clap-4.5.50",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.clap-4.5.50.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__clap_builder-4.5.50",
        sha256 = "0a4c05b9e80c5ccd3a7ef080ad7b6ba7d6fc00a985b8b157197075677c82c7a0",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/clap_builder/4.5.50/download"],
        strip_prefix = "clap_builder-4.5.50",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.clap_builder-4.5.50.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__clap_derive-4.5.49",
        sha256 = "2a0b5487afeab2deb2ff4e03a807ad1a03ac532ff5a2cee5d86884440c7f7671",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/clap_derive/4.5.49/download"],
        strip_prefix = "clap_derive-4.5.49",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.clap_derive-4.5.49.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__clap_lex-0.7.6",
        sha256 = "a1d728cc89cf3aee9ff92b05e62b19ee65a02b5702cff7d5a377e32c6ae29d8d",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/clap_lex/0.7.6/download"],
        strip_prefix = "clap_lex-0.7.6",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.clap_lex-0.7.6.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__colorchoice-1.0.4",
        sha256 = "b05b61dc5112cbb17e4b6cd61790d9845d13888356391624cbe7e41efeac1e75",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/colorchoice/1.0.4/download"],
        strip_prefix = "colorchoice-1.0.4",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.colorchoice-1.0.4.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__constant_time_eq-0.3.1",
        sha256 = "7c74b8349d32d297c9134b8c88677813a227df8f779daa29bfc29c183fe3dca6",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/constant_time_eq/0.3.1/download"],
        strip_prefix = "constant_time_eq-0.3.1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.constant_time_eq-0.3.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__errno-0.3.14",
        sha256 = "39cab71617ae0d63f51a36d69f866391735b51691dbda63cf6f96d042b63efeb",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/errno/0.3.14/download"],
        strip_prefix = "errno-0.3.14",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.errno-0.3.14.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__fastrand-2.3.0",
        sha256 = "37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/fastrand/2.3.0/download"],
        strip_prefix = "fastrand-2.3.0",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.fastrand-2.3.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__find-msvc-tools-0.1.4",
        sha256 = "52051878f80a721bb68ebfbc930e07b65ba72f2da88968ea5c06fd6ca3d3a127",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/find-msvc-tools/0.1.4/download"],
        strip_prefix = "find-msvc-tools-0.1.4",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.find-msvc-tools-0.1.4.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__getrandom-0.3.4",
        sha256 = "899def5c37c4fd7b2664648c28120ecec138e4d395b459e5ca34f9cce2dd77fd",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/getrandom/0.3.4/download"],
        strip_prefix = "getrandom-0.3.4",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.getrandom-0.3.4.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__heck-0.5.0",
        sha256 = "2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/heck/0.5.0/download"],
        strip_prefix = "heck-0.5.0",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.heck-0.5.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__is_terminal_polyfill-1.70.1",
        sha256 = "7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/is_terminal_polyfill/1.70.1/download"],
        strip_prefix = "is_terminal_polyfill-1.70.1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.is_terminal_polyfill-1.70.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__itoa-1.0.15",
        sha256 = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/itoa/1.0.15/download"],
        strip_prefix = "itoa-1.0.15",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.itoa-1.0.15.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__lazy_static-1.5.0",
        sha256 = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/lazy_static/1.5.0/download"],
        strip_prefix = "lazy_static-1.5.0",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.lazy_static-1.5.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__libc-0.2.177",
        sha256 = "2874a2af47a2325c2001a6e6fad9b16a53b802102b528163885171cf92b15976",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/libc/0.2.177/download"],
        strip_prefix = "libc-0.2.177",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.libc-0.2.177.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__linux-raw-sys-0.11.0",
        sha256 = "df1d3c3b53da64cf5760482273a98e575c651a67eec7f77df96b5b642de8f039",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/linux-raw-sys/0.11.0/download"],
        strip_prefix = "linux-raw-sys-0.11.0",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.linux-raw-sys-0.11.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__lock_api-0.4.14",
        sha256 = "224399e74b87b5f3557511d98dff8b14089b3dadafcab6bb93eab67d3aace965",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/lock_api/0.4.14/download"],
        strip_prefix = "lock_api-0.4.14",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.lock_api-0.4.14.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__log-0.4.28",
        sha256 = "34080505efa8e45a4b816c349525ebe327ceaa8559756f0356cba97ef3bf7432",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/log/0.4.28/download"],
        strip_prefix = "log-0.4.28",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.log-0.4.28.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__memchr-2.7.6",
        sha256 = "f52b00d39961fc5b2736ea853c9cc86238e165017a493d1d5c8eac6bdc4cc273",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/memchr/2.7.6/download"],
        strip_prefix = "memchr-2.7.6",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.memchr-2.7.6.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__mio-1.1.0",
        sha256 = "69d83b0086dc8ecf3ce9ae2874b2d1290252e2a30720bea58a5c6639b0092873",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/mio/1.1.0/download"],
        strip_prefix = "mio-1.1.0",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.mio-1.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__nu-ansi-term-0.50.3",
        sha256 = "7957b9740744892f114936ab4a57b3f487491bbeafaf8083688b16841a4240e5",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/nu-ansi-term/0.50.3/download"],
        strip_prefix = "nu-ansi-term-0.50.3",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.nu-ansi-term-0.50.3.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__once_cell-1.21.3",
        sha256 = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/once_cell/1.21.3/download"],
        strip_prefix = "once_cell-1.21.3",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.once_cell-1.21.3.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__once_cell_polyfill-1.70.1",
        sha256 = "a4895175b425cb1f87721b59f0f286c2092bd4af812243672510e1ac53e2e0ad",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/once_cell_polyfill/1.70.1/download"],
        strip_prefix = "once_cell_polyfill-1.70.1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.once_cell_polyfill-1.70.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__parking_lot-0.12.5",
        sha256 = "93857453250e3077bd71ff98b6a65ea6621a19bb0f559a85248955ac12c45a1a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/parking_lot/0.12.5/download"],
        strip_prefix = "parking_lot-0.12.5",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.parking_lot-0.12.5.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__parking_lot_core-0.9.12",
        sha256 = "2621685985a2ebf1c516881c026032ac7deafcda1a2c9b7850dc81e3dfcb64c1",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/parking_lot_core/0.9.12/download"],
        strip_prefix = "parking_lot_core-0.9.12",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.parking_lot_core-0.9.12.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__pin-project-lite-0.2.16",
        sha256 = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/pin-project-lite/0.2.16/download"],
        strip_prefix = "pin-project-lite-0.2.16",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.pin-project-lite-0.2.16.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__proc-macro2-1.0.101",
        sha256 = "89ae43fd86e4158d6db51ad8e2b80f313af9cc74f5c0e03ccb87de09998732de",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/proc-macro2/1.0.101/download"],
        strip_prefix = "proc-macro2-1.0.101",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.proc-macro2-1.0.101.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__quote-1.0.41",
        sha256 = "ce25767e7b499d1b604768e7cde645d14cc8584231ea6b295e9c9eb22c02e1d1",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/quote/1.0.41/download"],
        strip_prefix = "quote-1.0.41",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.quote-1.0.41.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__r-efi-5.3.0",
        sha256 = "69cdb34c158ceb288df11e18b4bd39de994f6657d83847bdffdbd7f346754b0f",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/r-efi/5.3.0/download"],
        strip_prefix = "r-efi-5.3.0",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.r-efi-5.3.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__redox_syscall-0.5.18",
        sha256 = "ed2bf2547551a7053d6fdfafda3f938979645c44812fbfcda098faae3f1a362d",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/redox_syscall/0.5.18/download"],
        strip_prefix = "redox_syscall-0.5.18",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.redox_syscall-0.5.18.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__rustix-1.1.2",
        sha256 = "cd15f8a2c5551a84d56efdc1cd049089e409ac19a3072d5037a17fd70719ff3e",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/rustix/1.1.2/download"],
        strip_prefix = "rustix-1.1.2",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.rustix-1.1.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__ryu-1.0.20",
        sha256 = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/ryu/1.0.20/download"],
        strip_prefix = "ryu-1.0.20",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.ryu-1.0.20.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__same-file-1.0.6",
        sha256 = "93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/same-file/1.0.6/download"],
        strip_prefix = "same-file-1.0.6",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.same-file-1.0.6.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__scopeguard-1.2.0",
        sha256 = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/scopeguard/1.2.0/download"],
        strip_prefix = "scopeguard-1.2.0",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.scopeguard-1.2.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__serde-1.0.228",
        sha256 = "9a8e94ea7f378bd32cbbd37198a4a91436180c5bb472411e48b5ec2e2124ae9e",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/serde/1.0.228/download"],
        strip_prefix = "serde-1.0.228",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.serde-1.0.228.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__serde_core-1.0.228",
        sha256 = "41d385c7d4ca58e59fc732af25c3983b67ac852c1a25000afe1175de458b67ad",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/serde_core/1.0.228/download"],
        strip_prefix = "serde_core-1.0.228",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.serde_core-1.0.228.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__serde_derive-1.0.228",
        sha256 = "d540f220d3187173da220f885ab66608367b6574e925011a9353e4badda91d79",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/serde_derive/1.0.228/download"],
        strip_prefix = "serde_derive-1.0.228",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.serde_derive-1.0.228.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__serde_json-1.0.145",
        sha256 = "402a6f66d8c709116cf22f558eab210f5a50187f702eb4d7e5ef38d9a7f1c79c",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/serde_json/1.0.145/download"],
        strip_prefix = "serde_json-1.0.145",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.serde_json-1.0.145.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__sharded-slab-0.1.7",
        sha256 = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/sharded-slab/0.1.7/download"],
        strip_prefix = "sharded-slab-0.1.7",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.sharded-slab-0.1.7.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__shlex-1.3.0",
        sha256 = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/shlex/1.3.0/download"],
        strip_prefix = "shlex-1.3.0",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.shlex-1.3.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__signal-hook-registry-1.4.6",
        sha256 = "b2a4719bff48cee6b39d12c020eeb490953ad2443b7055bd0b21fca26bd8c28b",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/signal-hook-registry/1.4.6/download"],
        strip_prefix = "signal-hook-registry-1.4.6",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.signal-hook-registry-1.4.6.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__smallvec-1.15.1",
        sha256 = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/smallvec/1.15.1/download"],
        strip_prefix = "smallvec-1.15.1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.smallvec-1.15.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__socket2-0.6.1",
        sha256 = "17129e116933cf371d018bb80ae557e889637989d8638274fb25622827b03881",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/socket2/0.6.1/download"],
        strip_prefix = "socket2-0.6.1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.socket2-0.6.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__strsim-0.11.1",
        sha256 = "7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/strsim/0.11.1/download"],
        strip_prefix = "strsim-0.11.1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.strsim-0.11.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__syn-2.0.107",
        sha256 = "2a26dbd934e5451d21ef060c018dae56fc073894c5a7896f882928a76e6d081b",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/syn/2.0.107/download"],
        strip_prefix = "syn-2.0.107",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.syn-2.0.107.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__tempfile-3.23.0",
        sha256 = "2d31c77bdf42a745371d260a26ca7163f1e0924b64afa0b688e61b5a9fa02f16",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/tempfile/3.23.0/download"],
        strip_prefix = "tempfile-3.23.0",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.tempfile-3.23.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__thread_local-1.1.9",
        sha256 = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/thread_local/1.1.9/download"],
        strip_prefix = "thread_local-1.1.9",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.thread_local-1.1.9.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__tokio-1.48.0",
        sha256 = "ff360e02eab121e0bc37a2d3b4d4dc622e6eda3a8e5253d5435ecf5bd4c68408",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/tokio/1.48.0/download"],
        strip_prefix = "tokio-1.48.0",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.tokio-1.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__tokio-macros-2.6.0",
        sha256 = "af407857209536a95c8e56f8231ef2c2e2aff839b22e07a1ffcbc617e9db9fa5",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/tokio-macros/2.6.0/download"],
        strip_prefix = "tokio-macros-2.6.0",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.tokio-macros-2.6.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__tracing-0.1.41",
        sha256 = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/tracing/0.1.41/download"],
        strip_prefix = "tracing-0.1.41",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.tracing-0.1.41.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__tracing-attributes-0.1.30",
        sha256 = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/tracing-attributes/0.1.30/download"],
        strip_prefix = "tracing-attributes-0.1.30",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.tracing-attributes-0.1.30.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__tracing-core-0.1.34",
        sha256 = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/tracing-core/0.1.34/download"],
        strip_prefix = "tracing-core-0.1.34",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.tracing-core-0.1.34.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__tracing-log-0.2.0",
        sha256 = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/tracing-log/0.2.0/download"],
        strip_prefix = "tracing-log-0.2.0",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.tracing-log-0.2.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__tracing-subscriber-0.3.20",
        sha256 = "2054a14f5307d601f88daf0553e1cbf472acc4f2c51afab632431cdcd72124d5",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/tracing-subscriber/0.3.20/download"],
        strip_prefix = "tracing-subscriber-0.3.20",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.tracing-subscriber-0.3.20.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__unicode-ident-1.0.19",
        sha256 = "f63a545481291138910575129486daeaf8ac54aee4387fe7906919f7830c7d9d",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/unicode-ident/1.0.19/download"],
        strip_prefix = "unicode-ident-1.0.19",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.unicode-ident-1.0.19.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__utf8parse-0.2.2",
        sha256 = "06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/utf8parse/0.2.2/download"],
        strip_prefix = "utf8parse-0.2.2",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.utf8parse-0.2.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__valuable-0.1.1",
        sha256 = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/valuable/0.1.1/download"],
        strip_prefix = "valuable-0.1.1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.valuable-0.1.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__walkdir-2.5.0",
        sha256 = "29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/walkdir/2.5.0/download"],
        strip_prefix = "walkdir-2.5.0",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.walkdir-2.5.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__wasi-0.11.1-wasi-snapshot-preview1",
        sha256 = "ccf3ec651a847eb01de73ccad15eb7d99f80485de043efb2f370cd654f4ea44b",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/wasi/0.11.1+wasi-snapshot-preview1/download"],
        strip_prefix = "wasi-0.11.1+wasi-snapshot-preview1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.wasi-0.11.1+wasi-snapshot-preview1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__wasip2-1.0.1-wasi-0.2.4",
        sha256 = "0562428422c63773dad2c345a1882263bbf4d65cf3f42e90921f787ef5ad58e7",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/wasip2/1.0.1+wasi-0.2.4/download"],
        strip_prefix = "wasip2-1.0.1+wasi-0.2.4",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.wasip2-1.0.1+wasi-0.2.4.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__winapi-util-0.1.11",
        sha256 = "c2a7b1c03c876122aa43f3020e6c3c3ee5c05081c9a00739faf7503aeba10d22",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/winapi-util/0.1.11/download"],
        strip_prefix = "winapi-util-0.1.11",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.winapi-util-0.1.11.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__windows-link-0.2.1",
        sha256 = "f0805222e57f7521d6a62e36fa9163bc891acd422f971defe97d64e70d0a4fe5",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows-link/0.2.1/download"],
        strip_prefix = "windows-link-0.2.1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.windows-link-0.2.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__windows-sys-0.60.2",
        sha256 = "f2f500e4d28234f72040990ec9d39e3a6b950f9f22d3dba18416c35882612bcb",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows-sys/0.60.2/download"],
        strip_prefix = "windows-sys-0.60.2",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.windows-sys-0.60.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__windows-sys-0.61.2",
        sha256 = "ae137229bcbd6cdf0f7b80a31df61766145077ddf49416a728b02cb3921ff3fc",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows-sys/0.61.2/download"],
        strip_prefix = "windows-sys-0.61.2",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.windows-sys-0.61.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__windows-targets-0.53.5",
        sha256 = "4945f9f551b88e0d65f3db0bc25c33b8acea4d9e41163edf90dcd0b19f9069f3",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows-targets/0.53.5/download"],
        strip_prefix = "windows-targets-0.53.5",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.windows-targets-0.53.5.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__windows_aarch64_gnullvm-0.53.1",
        sha256 = "a9d8416fa8b42f5c947f8482c43e7d89e73a173cead56d044f6a56104a6d1b53",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_aarch64_gnullvm/0.53.1/download"],
        strip_prefix = "windows_aarch64_gnullvm-0.53.1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.windows_aarch64_gnullvm-0.53.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__windows_aarch64_msvc-0.53.1",
        sha256 = "b9d782e804c2f632e395708e99a94275910eb9100b2114651e04744e9b125006",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_aarch64_msvc/0.53.1/download"],
        strip_prefix = "windows_aarch64_msvc-0.53.1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.windows_aarch64_msvc-0.53.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__windows_i686_gnu-0.53.1",
        sha256 = "960e6da069d81e09becb0ca57a65220ddff016ff2d6af6a223cf372a506593a3",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_i686_gnu/0.53.1/download"],
        strip_prefix = "windows_i686_gnu-0.53.1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.windows_i686_gnu-0.53.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__windows_i686_gnullvm-0.53.1",
        sha256 = "fa7359d10048f68ab8b09fa71c3daccfb0e9b559aed648a8f95469c27057180c",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_i686_gnullvm/0.53.1/download"],
        strip_prefix = "windows_i686_gnullvm-0.53.1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.windows_i686_gnullvm-0.53.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__windows_i686_msvc-0.53.1",
        sha256 = "1e7ac75179f18232fe9c285163565a57ef8d3c89254a30685b57d83a38d326c2",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_i686_msvc/0.53.1/download"],
        strip_prefix = "windows_i686_msvc-0.53.1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.windows_i686_msvc-0.53.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__windows_x86_64_gnu-0.53.1",
        sha256 = "9c3842cdd74a865a8066ab39c8a7a473c0778a3f29370b5fd6b4b9aa7df4a499",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_x86_64_gnu/0.53.1/download"],
        strip_prefix = "windows_x86_64_gnu-0.53.1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.windows_x86_64_gnu-0.53.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__windows_x86_64_gnullvm-0.53.1",
        sha256 = "0ffa179e2d07eee8ad8f57493436566c7cc30ac536a3379fdf008f47f6bb7ae1",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_x86_64_gnullvm/0.53.1/download"],
        strip_prefix = "windows_x86_64_gnullvm-0.53.1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.windows_x86_64_gnullvm-0.53.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__windows_x86_64_msvc-0.53.1",
        sha256 = "d6bbff5f0aada427a1e5a6da5f1f98158182f26556f345ac9e04d36d0ebed650",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_x86_64_msvc/0.53.1/download"],
        strip_prefix = "windows_x86_64_msvc-0.53.1",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.windows_x86_64_msvc-0.53.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rrtd__wit-bindgen-0.46.0",
        sha256 = "f17a85883d4e6d00e8a97c586de764dabcc06133f7f1d55dce5cdc070ad7fe59",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/wit-bindgen/0.46.0/download"],
        strip_prefix = "wit-bindgen-0.46.0",
        build_file = Label("//test/determinism/3rdparty/crates:BUILD.wit-bindgen-0.46.0.bazel"),
    )

    return [
        struct(repo = "rrtd__anyhow-1.0.100", is_dev_dep = False),
        struct(repo = "rrtd__blake3-1.8.2", is_dev_dep = False),
        struct(repo = "rrtd__clap-4.5.50", is_dev_dep = False),
        struct(repo = "rrtd__serde-1.0.228", is_dev_dep = False),
        struct(repo = "rrtd__serde_json-1.0.145", is_dev_dep = False),
        struct(repo = "rrtd__tempfile-3.23.0", is_dev_dep = False),
        struct(repo = "rrtd__tokio-1.48.0", is_dev_dep = False),
        struct(repo = "rrtd__tracing-0.1.41", is_dev_dep = False),
        struct(repo = "rrtd__tracing-subscriber-0.3.20", is_dev_dep = False),
        struct(repo = "rrtd__walkdir-2.5.0", is_dev_dep = False),
    ]
